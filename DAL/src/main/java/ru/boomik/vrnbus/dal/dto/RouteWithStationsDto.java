/*
 * Anonymous API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.boomik.vrnbus.dal.dto;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * RouteWithStationsDto
 */

public class RouteWithStationsDto {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("forwardDirectionStations")
  private List<Integer> forwardDirectionStations = null;

  @SerializedName("backDirectionStations")
  private List<Integer> backDirectionStations = null;

  public RouteWithStationsDto id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/

  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public RouteWithStationsDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Get type
   * @return type
  **/

  public TypeEnum getType() {
    return type;
  }

  public RouteWithStationsDto forwardDirectionStations(List<Integer> forwardDirectionStations) {
    this.forwardDirectionStations = forwardDirectionStations;
    return this;
  }

  public RouteWithStationsDto addForwardDirectionStationsItem(Integer forwardDirectionStationsItem) {
    if (this.forwardDirectionStations == null) {
      this.forwardDirectionStations = new ArrayList<Integer>();
    }
    this.forwardDirectionStations.add(forwardDirectionStationsItem);
    return this;
  }

   /**
   * Get forwardDirectionStations
   * @return forwardDirectionStations
  **/

  public List<Integer> getForwardDirectionStations() {
    return forwardDirectionStations;
  }

  public void setForwardDirectionStations(List<Integer> forwardDirectionStations) {
    this.forwardDirectionStations = forwardDirectionStations;
  }

  public RouteWithStationsDto backDirectionStations(List<Integer> backDirectionStations) {
    this.backDirectionStations = backDirectionStations;
    return this;
  }

  public RouteWithStationsDto addBackDirectionStationsItem(Integer backDirectionStationsItem) {
    if (this.backDirectionStations == null) {
      this.backDirectionStations = new ArrayList<Integer>();
    }
    this.backDirectionStations.add(backDirectionStationsItem);
    return this;
  }

   /**
   * Get backDirectionStations
   * @return backDirectionStations
  **/

  public List<Integer> getBackDirectionStations() {
    return backDirectionStations;
  }

  public void setBackDirectionStations(List<Integer> backDirectionStations) {
    this.backDirectionStations = backDirectionStations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteWithStationsDto routeWithStationsDto = (RouteWithStationsDto) o;
    return Objects.equals(this.id, routeWithStationsDto.id) &&
        Objects.equals(this.name, routeWithStationsDto.name) &&
        Objects.equals(this.type, routeWithStationsDto.type) &&
        Objects.equals(this.forwardDirectionStations, routeWithStationsDto.forwardDirectionStations) &&
        Objects.equals(this.backDirectionStations, routeWithStationsDto.backDirectionStations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, forwardDirectionStations, backDirectionStations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteWithStationsDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    forwardDirectionStations: ").append(toIndentedString(forwardDirectionStations)).append("\n");
    sb.append("    backDirectionStations: ").append(toIndentedString(backDirectionStations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

