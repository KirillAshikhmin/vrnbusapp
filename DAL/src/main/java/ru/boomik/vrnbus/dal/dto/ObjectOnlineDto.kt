/*
 * Anonymous API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package ru.boomik.vrnbus.dal.dto

import com.google.gson.annotations.SerializedName
import kotlinx.serialization.Serializable
import java.util.*


/**
 * ObjectOnlineDto
 */
@Serializable
public class ObjectOnlineDto {
    @SerializedName("speed")
    val speed: Double = .0
    @SerializedName("averageSpeed")
    val averageSpeed: Double = .0

    @SerializedName("minutesArrival")
    val minutesLeftToBusStop: Double = .0

    @SerializedName("id")
    val id: Int = 0

    @SerializedName("name")
    val name: String? = null

    @SerializedName("lastTime")
    var lastTime: String = "2020-11-29T15:00:57"

    @SerializedName("lastLongitude")
    val lastLongitude: Double = .0

    @SerializedName("lastLatitude")
    val lastLatitude: Double = .0

    @SerializedName("longitude")
    val longitude: Double = .0

    @SerializedName("latitude")
    val latitude: Double = .0

    @SerializedName("lastSpeed")
    val lastSpeed: Double = .0

    @SerializedName("lastStationTime")
    var lastStationTime: String? = "2020-11-29T15:00:57"

    @SerializedName("azimuth")
    val azimuth: Int = 0

    @SerializedName("carTypeId")
    val carTypeId: Int = 0

    @SerializedName("routeName")
    val routeName: String = ""

    @SerializedName("lastRouteId")
    val lastRouteId: Int = 0

    @SerializedName("lastStationId")
    val lastStationId: Int = 0

    @SerializedName("lowfloor")
    val lowfloor: Boolean = false


    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null || javaClass != other.javaClass) {
            return false
        }
        val objectOnlineDto = other as ObjectOnlineDto
        return speed == objectOnlineDto.speed &&
                minutesLeftToBusStop == objectOnlineDto.minutesLeftToBusStop &&
                id == objectOnlineDto.id &&
                name == objectOnlineDto.name &&
                lastTime == objectOnlineDto.lastTime &&
                longitude == objectOnlineDto.longitude &&
                lastLatitude == objectOnlineDto.lastLatitude &&
                lastSpeed == objectOnlineDto.lastSpeed &&
                lastStationTime == objectOnlineDto.lastStationTime &&
                azimuth == objectOnlineDto.azimuth &&
                carTypeId == objectOnlineDto.carTypeId &&
                routeName == objectOnlineDto.routeName &&
                lowfloor == objectOnlineDto.lowfloor
    }

    override fun hashCode(): Int {
        return Objects.hash(speed, minutesLeftToBusStop, id, name, lastTime, longitude, lastLatitude, lastSpeed, lastStationTime, azimuth, carTypeId, routeName, lowfloor)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class ObjectOnlineDto {\n")
        sb.append("    averageSpeed: ").append(toIndentedString(speed)).append("\n")
        sb.append("    minutesLeftToBusStop: ").append(toIndentedString(minutesLeftToBusStop)).append("\n")
        sb.append("    id: ").append(toIndentedString(id)).append("\n")
        sb.append("    name: ").append(toIndentedString(name)).append("\n")
        sb.append("    lastTime: ").append(toIndentedString(lastTime)).append("\n")
        sb.append("    lastLongitude: ").append(toIndentedString(longitude)).append("\n")
        sb.append("    lastLatitude: ").append(toIndentedString(lastLatitude)).append("\n")
        sb.append("    lastSpeed: ").append(toIndentedString(lastSpeed)).append("\n")
        sb.append("    lastStationTime: ").append(toIndentedString(lastStationTime)).append("\n")
        sb.append("    routeName: ").append(toIndentedString(routeName)).append("\n")
        sb.append("    carTypeId: ").append(toIndentedString(carTypeId)).append("\n")
        sb.append("    azimuth: ").append(toIndentedString(azimuth)).append("\n")
        sb.append("    lowfloor: ").append(toIndentedString(lowfloor)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}